openapi: 3.1.0

info:
  title: Мессенджер API
  version: 1.0.0

servers:
  - url: https://192.168.0.101:5001/api/v1 
    description: Основной сервер API v1

paths:
  /auth/refresh-token:
    get:
      tags:
        - Auth
      summary: Получение access токена по refresh токену
      operationId: authRefreshTokenGET
      responses:
        '200':
          description: Access токен успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Refresh токен не найден в cookies
        '404':
          description: Пользователь не найден

  /auth/authorize:
    get:
      tags:
        - Auth
      summary: Получение данных своей учетной записи по access токену
      operationId: authAuthorizeGET
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: User ID не найден в токене

  /auth/unauthorize:
    get:
      tags:
        - Auth
      summary: Выход из учетной записи
      operationId: authUnauthorizeGET
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный выход
        '401':
          description: User ID не найден в токене

  /auth/login:
    post:
      tags:
        - Auth
      summary: Авторизация пользователя
      operationId: authLoginPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoginRequest'
        required: true
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenDTO'
        '401':
          description: Неверные учетные данные
        '404':
          description: Пользователь не найден

  /auth/registration:
    post:
      tags:
        - Auth
      summary: Регистрация нового пользователя
      operationId: authRegistrationPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationCommand'
        required: true
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenDTO'
        '400':
          description: Некорректные данные
        '409':
          description: Пользователь уже существует

  /auth/google-login:
    get:
      tags:
        - Auth
      summary: Начало процесса входа через Google
      operationId: authGoogleLoginGET
      responses:
        '302':
          description: Перенаправление на страницу входа Google
        '400':
          description: Ошибка при начале процесса входа через Google

  /auth/google-response:
    get:
      tags:
        - Auth
      summary: Обработка ответа от Google после входа
      operationId: authGoogleResponseGET
      responses:
        '200':
          description: Успешный вход или регистрация через Google
          content:
            application/json:
              schema:
                type: object
                properties:
                  text:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserDTO'
                  authResultDto:
                    $ref: '#/components/schemas/AuthDTO'
        '400':
          description: Ошибка аутентификации через Google
        '401':
          description: Неверные учетные данные Google

  /auth/google-mobile-auth:
    post:
      tags:
        - Auth
      summary: Аутентификация через Google для мобильных устройств
      operationId: authGoogleMobileAuthPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleAuthRequest'
        required: true
      responses:
        '200':
          description: Успешный вход или регистрация через Google
          content:
            application/json:
              schema:
                type: object
                properties:
                  text:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserDTO'
                  authResultDto:
                    $ref: '#/components/schemas/AuthDTO'
        '400':
          description: Ошибка аутентификации через Google

  /users:
    get:
      tags:
        - Users
      summary: Получение списка всех пользователей (только для администраторов)
      operationId: usersGET
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '401':
          description: Неавторизованный запрос
        '403':
          description: Недостаточно прав для выполнения операции
    patch:
      tags:
        - Users
      summary: Обновление данных пользователя
      operationId: usersPATCH
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
        required: true
      responses:
        '200':
          description: Данные успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Некорректные данные
        '401':
          description: Неавторизованный запрос
        '404':
          description: Пользователь не найден

  /users/{id}:
    delete:
      tags:
        - Users
      summary: Удаление учетной записи пользователя (только для администраторов)
      operationId: usersIdDELETE
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Учетная запись успешно удалена
        '401':
          description: Неавторизованный запрос
        '403':
          description: Недостаточно прав для выполнения операции
        '404':
          description: Пользователь не найден
        '422':
          description: Администратор не может удалить свою учетную запись

  /users/me:
    delete:
      tags:
        - Users
      summary: Удаление своей учетной записи
      operationId: usersMeDELETE
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Учетная запись успешно удалена
        '401':
          description: Неавторизованный запрос

  /chat/users:
    get:
      tags:
        - Chat
      summary: Получение списка всех пользователей, кроме текущего
      operationId: chatUsersGET
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatUserDTO'
        '401':
          description: Неавторизованный запрос

  /chat/history/{userId}:
    get:
      tags:
        - Chat
      summary: Получение истории сообщений с указанным пользователем
      operationId: chatHistoryUserIdGET
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: История сообщений успешно получена
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessageDTO'
        '401':
          description: Неавторизованный запрос

  /chat/unread:
    get:
      tags:
        - Chat
      summary: Получение количества непрочитанных сообщений
      operationId: chatUnreadGET
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Количество непрочитанных сообщений
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Неавторизованный запрос

  /chat/mark-read/{userId}:
    post:
      tags:
        - Chat
      summary: Отметить сообщения от указанного пользователя как прочитанные
      operationId: chatMarkReadUserIdPOST
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Сообщения успешно отмечены как прочитанные
        '401':
          description: Неавторизованный запрос

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    UserRegistrationCommand:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
      required:
        - email
        - password
        - firstName
        - lastName

    GoogleAuthRequest:
      type: object
      properties:
        idToken:
          type: string
      required:
        - idToken

    AccessTokenDTO:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken

    AuthDTO:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken

    UpdateUserCommand:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
        password:
          type: string
          format: password

    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
        role:
          type: string
        authType:
          type: string
      required:
        - id
        - email
        - firstName
        - lastName
        - role
        - authType

    ChatUserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
      required:
        - id
        - email
        - firstName
        - lastName

    ChatMessageDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        senderId:
          type: string
          format: uuid
        receiverId:
          type: string
          format: uuid
        content:
          type: string
        timestamp:
          type: string
          format: date-time
        isRead:
          type: boolean
      required:
        - id
        - senderId
        - receiverId
        - content
        - timestamp
        - isRead
